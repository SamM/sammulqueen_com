
First I created a new folder to start building the webserver in, in this case I called it "sammulqueen_com" because that was the domain name I was going to use when publishing the website.

Then I created this documentation.txt file within the folder to begin writing these notes.

Then I wrote this, and this. I also wrote this. Haha just joking, let's begin.

The aim of this exercise is to create my own personal website, and on it host two development blogs. The first blog will detail my development of this website itself, and these notes will be used to form it's content. The second blog will be on the development of 3d worlds from scratch using primarily javascript. In the second I hope to include interactive canvas elements into the blog posts which can show off the interesting work I produce in the process of developing each segment of work for the project. They could be as simple as drawing a circle on screen, if that was a step in the project.

I have decided that I am going to use NodeJS to develop the webserver component of the website. This will handle all of the HTTP requests that I recieve to my domain when the website goes live. I will also be using it locally on my computer while I develop it prior to and probably during the production stage of the website's development.

To help break up the steps I take in developing this website, and also to keep track of all the changes that go on in the process: I have decided to use Git as well as keeping the documentation.txt file up to date.

Fortunately I had already installed Git on my development laptop, had an existing Github account and had the Github desktop app. installed so I was ready to start using it immediately.

By using Github I can access the project from any computer and make updates to it from multiple different locations while keeping each device's version of the website in sync too.

I opened the Github app. and created a new repository from the folder I created for the project.

From now on paragraphs starting with >> are the messages from git commits I make during the development of the website.

Here's the first one:

>>I created documentation.txt and wrote an introduction then made the first commit.

>>Used Notepad to save the documentation.txt file and it got saved as documentation.txt.txt. So I fixed it.

Ok so I think I have the documentation side of it sussed. Time to get started working on the project.

So I've already been doing some thinking about some of the features I'd like to have in the development blogs.

I'd like each blog to be seperated into their own folders. I'd like the server to treat each folder in much the same way and be able to build and run a website for each blog.

I'd like the blog posts to be stored as html files, js files and css files.
I'd also like blog posts to include base css files, and base javascript files.

I've decided that each post can omit all of the website's interface and instead focussing purely on the content. Instead a combination of Javascript interface creation and CSS styling will be utilized. The JS script will be run on page load and will generate the interface and will perhaps even have it's own intro.

Later I would like the JS interface to be incharge of taking and displaying comments from website visitors and display page stats like the number of views in the last minute, 5 mins, hour, day, week, month and year.

So the posts will be stored as html files. I would like the website to have a file editor that loads, displays and allows editting of the HTML, JS, and CSS files.

It would be good if all of the files get timestamped for creation dates and the date of the last update. This can be done in the form of meta tags in the HTML file and comment headers in the JS and CSS files. I'll also include my name as author.

It would also be good if the editor could generate this metadata for each file automatically.

Next I'll talk about the actual webserver which will be written in Javascript using NodeJS.

I would like the server to be event driven. This means that when requests are made to the server it will emit an event. Then by using event listeners I can write processing code to be executed when specific things about the request are identified.

NodeJS already has a class called EventEmitter which could be used for this purpose, but I would like to write my own so that I can have it working just how I like and add features easily.

>>Saving updated documentation.txt file.

>>Created a folder for my libraries of javascript files and an Events.js file.

I would like to be able to make event listeners for before an event, on an event and after an event.

I would like to make it so that when listening function use 'this' it will point to the request object. I would also like to pass in arguments to be sent to the listeners also.

This will be done with:
  Events.emit.call(request, "request", "arg 1", {obj: true});

There should be before, on and after methods for adding listeners at these points and remove_before, remove and remove_after methods for removing listeners from the lists.

>>Created Events class with emit, before, on, after, remove_before, remove, remove_after methods.

Because I wanted there to be events fired before and after as well as on the time of an event there now needs to be 3 collections of listeners.

Each collection will be a javascript object which will list arrays of listener functions mapped to the event names.

The emit function loops thru the before list, main list and after list in turn (if they exist) and calls each of the listener functions, passing in the arguments from the emit function.

Because there are three methods to add listeners which all do the same thing except with different lists and three methods for removing listeners that that follow the same pattern I decided to generate each of the methods programatically using a loop.

>>Updated documentation with an explanation of the Events.js class

So that's the events handled for now, if I decide it needs more features later I'll add them then.

>>Created Server.js file and initialized it with a basic template for my JS class.


>>Added event handling to the Server class.

>>Changed the file structure of the project folder.
>>>>Added a server and client folder to seperate js files, and kept the lib folder for js files that are useable to both server and client.

(>> denotes the summary of the commit)
(>>>> denotes a description of the commit)

I'll use the summary to say what I did.
I'll use the description to describe how I did it.

>>Redesigned Events class to use a single array of listeners, which are object-based.
>>>>The new system stores all listeners in one array. They are stored as event objects. I added more stages that can be targeted, now there are: first, before, at, after, last.
>>>>Event objects have these attributes: stage, name, listener function, priority (less ranks first), and the time of their creation.
>>>>By default the listeners get sorted by priority and then by time (earliest ranks first).

>>Updated Server class to load listeners from the /server/listeners folder.
>>>>Loads all js or json files from every folder inside /server/listeners.
>>>>Each file must return an array of listeners to be concatenated on to the end of the events.listeners array.

>>Made empty listener files for different http request types: get, post, put, delete

>>Added start method to Server which loads all listeners from file and then emits the start event.
>>>>I also added a blank listener file for the start event.
